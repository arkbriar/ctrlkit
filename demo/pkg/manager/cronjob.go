//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by ctrlkit. DO NOT EDIT.

package manager

import (
	"context"
	apiv1 "demo/api/v1"
	"fmt"

	"github.com/arkbriar/ctrlkit/pkg/ctrlkit"
	"github.com/go-logr/logr"
	batchv1 "k8s.io/api/batch/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// CronJobControllerManagerState is the state manager of CronJobControllerManager.
type CronJobControllerManagerState struct {
	client.Reader
	target *apiv1.CronJob
}

// GetJobs lists jobs with the following selectors:
//   + fields/.metadata.controller=${target.Name}
//   + labels/cronjob=${target.Name}
//   + owned
func (s *CronJobControllerManagerState) GetJobs(ctx context.Context) ([]batchv1.Job, error) {
	var jobsList batchv1.JobList

	matchingLabels := map[string]string{
		"cronjob": s.target.Name,
	}
	matchingFields := map[string]string{
		".metadata.controller": s.target.Name,
	}

	err := s.List(ctx, &jobsList, client.InNamespace(s.target.Namespace),
		client.MatchingLabels(matchingLabels), client.MatchingFields(matchingFields))
	if err != nil {
		return nil, fmt.Errorf("unable to get state 'jobs': more than 1 object found")
	}

	var validated []batchv1.Job
	for _, obj := range jobsList.Items {
		if ctrlkit.ValidateOwnership(&obj, s.target) {
			validated = append(validated, obj)
		}
	}

	return validated, nil
}

// NewCronJobControllerManagerState returns a CronJobControllerManagerState (target is not copied).
func NewCronJobControllerManagerState(reader client.Reader, target *apiv1.CronJob) CronJobControllerManagerState {
	return CronJobControllerManagerState{
		Reader: reader,
		target: target,
	}
}

// CronJobControllerManagerImpl declares the implementation interface for CronJobControllerManager.
type CronJobControllerManagerImpl interface {
	ctrlkit.CrontollerManagerActionLifeCycleHook

	// List all active jobs, and update the status.
	ListActiveJobsAndUpdateStatus(ctx context.Context, logger logr.Logger, jobs []batchv1.Job) (ctrl.Result, error)

	// Clean up old jobs according to the history limit.
	CleanUpOldJobsExceedsHistoryLimits(ctx context.Context, logger logr.Logger, jobs []batchv1.Job) (ctrl.Result, error)

	// Run the next job if it's on time, or otherwise we should wait
	// until the next scheduled time.
	RunNextScheduledJob(ctx context.Context, logger logr.Logger) (ctrl.Result, error)

	// Update status of CronJob.
	UpdateCronJobStatus(ctx context.Context, logger logr.Logger) (ctrl.Result, error)
}

// CronJobControllerManager declares all the actions needed by the CronJobController.
type CronJobControllerManager struct {
	state  CronJobControllerManagerState
	impl   CronJobControllerManagerImpl
	logger logr.Logger
}

// ListActiveJobsAndUpdateStatus generates the action of "ListActiveJobsAndUpdateStatus".
func (m *CronJobControllerManager) ListActiveJobsAndUpdateStatus() ctrlkit.ReconcileAction {
	return ctrlkit.WrapAction("ListActiveJobsAndUpdateStatus", func(ctx context.Context) (ctrl.Result, error) {
		logger := m.logger.WithValues("action", "ListActiveJobsAndUpdateStatus")

		// Get states.
		jobs, err := m.state.GetJobs(ctx)
		if err != nil {
			return ctrlkit.RequeueIfError(err)
		}

		// Invoke action.
		defer m.impl.AfterActionRun("ListActiveJobsAndUpdateStatus", ctx, logger)
		m.impl.BeforeActionRun("ListActiveJobsAndUpdateStatus", ctx, logger)

		return m.impl.ListActiveJobsAndUpdateStatus(ctx, logger, jobs)
	})
}

// CleanUpOldJobsExceedsHistoryLimits generates the action of "CleanUpOldJobsExceedsHistoryLimits".
func (m *CronJobControllerManager) CleanUpOldJobsExceedsHistoryLimits() ctrlkit.ReconcileAction {
	return ctrlkit.WrapAction("CleanUpOldJobsExceedsHistoryLimits", func(ctx context.Context) (ctrl.Result, error) {
		logger := m.logger.WithValues("action", "CleanUpOldJobsExceedsHistoryLimits")

		// Get states.
		jobs, err := m.state.GetJobs(ctx)
		if err != nil {
			return ctrlkit.RequeueIfError(err)
		}

		// Invoke action.
		defer m.impl.AfterActionRun("CleanUpOldJobsExceedsHistoryLimits", ctx, logger)
		m.impl.BeforeActionRun("CleanUpOldJobsExceedsHistoryLimits", ctx, logger)

		return m.impl.CleanUpOldJobsExceedsHistoryLimits(ctx, logger, jobs)
	})
}

// RunNextScheduledJob generates the action of "RunNextScheduledJob".
func (m *CronJobControllerManager) RunNextScheduledJob() ctrlkit.ReconcileAction {
	return ctrlkit.WrapAction("RunNextScheduledJob", func(ctx context.Context) (ctrl.Result, error) {
		logger := m.logger.WithValues("action", "RunNextScheduledJob")

		// Invoke action.
		defer m.impl.AfterActionRun("RunNextScheduledJob", ctx, logger)
		m.impl.BeforeActionRun("RunNextScheduledJob", ctx, logger)

		return m.impl.RunNextScheduledJob(ctx, logger)
	})
}

// UpdateCronJobStatus generates the action of "UpdateCronJobStatus".
func (m *CronJobControllerManager) UpdateCronJobStatus() ctrlkit.ReconcileAction {
	return ctrlkit.WrapAction("UpdateCronJobStatus", func(ctx context.Context) (ctrl.Result, error) {
		logger := m.logger.WithValues("action", "UpdateCronJobStatus")

		// Invoke action.
		defer m.impl.AfterActionRun("UpdateCronJobStatus", ctx, logger)
		m.impl.BeforeActionRun("UpdateCronJobStatus", ctx, logger)

		return m.impl.UpdateCronJobStatus(ctx, logger)
	})
}

// NewCronJobControllerManager returns a new CronJobControllerManager with given state and implementation.
func NewCronJobControllerManager(state CronJobControllerManagerState, impl CronJobControllerManagerImpl, logger logr.Logger) CronJobControllerManager {
	return CronJobControllerManager{
		state:  state,
		impl:   impl,
		logger: logger,
	}
}
